\input texinfo

@c dfio.texi --- Reference manual

@c Copyright (C) 2019-2022 Steve Nunez

@c This file is part of Data Frame I/O.

@c This program is distributed under the terms of the Microsoft Public
@c License.


@c Commentary:

@c Generated automatically by Declt version 4.0 beta 2 "William Riker"
@c on Wed Jul 20 10:55:07 2022 GMT+8.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename dfio.info
@settitle The Data Frame I/O Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The Data Frame I/O Reference Manual, version 1.0.0.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Lisp-Stat
@direntry
* Data Frame I/O Reference Manual: (dfio). The Data Frame I/O Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2019-2022 Steve Nunez

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The Data Frame I/O Reference Manual
@subtitle Data frame I/O, version 1.0.0

@author Steve Nunez <@email{steve@atchar{}symbolics.tech}>

@page
@quotation
This manual was generated automatically by Declt 4.0b2.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The Data Frame I/O Reference Manual
This is the Data Frame I/O Reference Manual, version 1.0.0,
generated automatically by Declt version 4.0b2.

@menu
* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Systems, Top, Top
@unnumbered Copying
@quotation
This program is distributed under the terms of the Microsoft Public
License.
@end quotation



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Files, Copying, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The dfio system::
@end menu


@c ---------------
@c The dfio system
@c ---------------
@node The dfio system, , Systems, Systems
@section @t{dfio}
@anchor{❨1❩}@c
@systemindex{dfio}@c
Common Lisp library for reading and writing data-frames
@table @strong
@item Long Name
Data frame I/O
@item Author
Steve Nunez <@email{steve@atchar{}symbolics.tech}>
@item Source Control
@t{(GIT https://github.com/Lisp-Stat/dfio.git)}
@item Bug Tracker
@uref{https://github.com/Lisp-Stat/dfio/issues}
@item License
MS-PL
@item Long Description
DFIO is used to read and write data frames from string@comma{} streams or disk.  When building a library like this@comma{} one question that needs to be answered is "where do you draw the line on formats?".  For example@comma{} should DFIO read/write JSON?  The answer to that question is 'no'@comma{} and the reason is that there are many JSON formats -- they are applicaton specific.  Application specific format should be read in an application specific package@comma{} and this is the case@comma{} for example@comma{} with Vega.  Formats like CSV@comma{} HD5 or Feather are application agnostic and should be included in DFIO.
@item Version
1.0.0
@item Dependencies
@itemize @bullet
@item
@t{alexandria}@: (system).
@item
@t{anaphora}@: (system).
@item
@t{data-frame}@: (system).
@item
@t{dexador}@: (system).
@item
@t{fare-csv}@: (system).
@item
@t{let-plus}@: (system).
@end itemize
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨3❩, , @t{pkgdcl.lisp}}@: (file).
@item
@ref{❨4❩, , @t{decimal.lisp}}@: (file).
@item
@ref{❨5❩, , @t{string-table.lisp}}@: (file).
@item
@ref{❨6❩, , @t{data-column.lisp}}@: (file).
@item
@ref{❨7❩, , @t{utils.lisp}}@: (file).
@item
@ref{❨8❩, , @t{write.lisp}}@: (file).
@item
@ref{❨9❩, , @t{delimited-text.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Systems, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The dfio/dfio․asd file::
* The dfio/pkgdcl․lisp file::
* The dfio/decimal․lisp file::
* The dfio/string-table․lisp file::
* The dfio/data-column․lisp file::
* The dfio/utils․lisp file::
* The dfio/write․lisp file::
* The dfio/delimited-text․lisp file::
@end menu

@node The dfio/dfio․asd file, The dfio/pkgdcl․lisp file, Lisp files, Lisp files
@subsection @t{dfio/dfio.asd}
@anchor{❨2❩}@c
@fileindex{dfio.asd}@c
@table @strong
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item ASDF Systems
@ref{❨1❩, , @t{dfio}}.
@end table

@node The dfio/pkgdcl․lisp file, The dfio/decimal․lisp file, The dfio/dfio․asd file, Lisp files
@subsection @t{dfio/pkgdcl.lisp}
@anchor{❨3❩}@c
@fileindex{pkgdcl.lisp}@c
@table @strong
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Packages
@itemize @bullet
@item
@ref{❨10❩, , @t{dfio.decimal}}.
@item
@ref{❨11❩, , @t{dfio.string-table}}.
@item
@ref{❨12❩, , @t{dfio}}.
@item
@ref{❨13❩, , @t{dfio.data-column}}.
@end itemize
@end table

@node The dfio/decimal․lisp file, The dfio/string-table․lisp file, The dfio/pkgdcl․lisp file, Lisp files
@subsection @t{dfio/decimal.lisp}
@anchor{❨4❩}@c
@fileindex{decimal.lisp}@c
@table @strong
@item Dependency
@ref{❨3❩, , @t{pkgdcl.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨18❩, , @t{parse-rational}}@: (function).
@item
@ref{❨15❩, , @t{parse-rational-error}}@: (condition).
@item
@ref{❨14❩, , @t{parse-real}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨21❩, , @t{+exponent-chars+}}@: (special variable).
@item
@ref{❨19❩, , @t{gobble-positive-integer}}@: (function).
@item
@ref{❨20❩, , @t{gobble-sign}}@: (function).
@end itemize
@end table

@node The dfio/string-table․lisp file, The dfio/data-column․lisp file, The dfio/decimal․lisp file, Lisp files
@subsection @t{dfio/string-table.lisp}
@anchor{❨5❩}@c
@fileindex{string-table.lisp}@c
@table @strong
@item Dependency
@ref{❨4❩, , @t{decimal.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨83❩, , @t{print-object}}@: (method).
@item
@ref{❨25❩, , @t{string-table}}@: (function).
@item
@ref{❨26❩, , @t{string-table}}@: (structure).
@item
@ref{❨30❩, , @t{string-table-add}}@: (function).
@item
@ref{❨24❩, , @t{string-table-count}}@: (function).
@item
@ref{❨29❩, , @t{string-table-duplicate}}@: (condition).
@item
@ref{❨23❩, , @t{string-table-intern}}@: (function).
@item
@ref{❨22❩, , @t{string-table-lookup}}@: (function).
@item
@ref{❨31❩, , @t{string-table-not-found}}@: (condition).
@item
@ref{❨28❩, , @t{string-table-strings}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨36❩, , @t{copy-string-table}}@: (function).
@item
@ref{❨32❩, , @t{string-table-get}}@: (function).
@item
@ref{❨33❩, , @t{(setf string-table-get)}}@: (function).
@item
@ref{❨37❩, , @t{string-table-p}}@: (function).
@item
@ref{❨34❩, , @t{string-table-table}}@: (reader).
@item
@ref{❨35❩, , @t{(setf string-table-table)}}@: (writer).
@end itemize
@end table

@node The dfio/data-column․lisp file, The dfio/utils․lisp file, The dfio/string-table․lisp file, Lisp files
@subsection @t{dfio/data-column.lisp}
@anchor{❨6❩}@c
@fileindex{data-column.lisp}@c
@table @strong
@item Dependency
@ref{❨5❩, , @t{string-table.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨53❩, , @t{data-column}}@: (function).
@item
@ref{❨54❩, , @t{data-column}}@: (class).
@item
@ref{❨65❩, , @t{data-column-add}}@: (function).
@item
@ref{❨67❩, , @t{data-column-counts}}@: (function).
@item
@ref{❨66❩, , @t{data-column-vector}}@: (function).
@end itemize
@item Internals
@ref{❨68❩, , @t{non-negative-integer}}@: (type).
@end table

@node The dfio/utils․lisp file, The dfio/write․lisp file, The dfio/data-column․lisp file, Lisp files
@subsection @t{dfio/utils.lisp}
@anchor{❨7❩}@c
@fileindex{utils.lisp}@c
@table @strong
@item Dependency
@ref{❨6❩, , @t{data-column.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨42❩, , @t{string-to-keyword}}@: (function).
@item
@ref{❨44❩, , @t{string-to-symbol}}@: (function).
@item
@ref{❨41❩, , @t{symbol-name-to-pathname}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨46❩, , @t{%in-stream}}@: (function).
@item
@ref{❨49❩, , @t{%out-stream}}@: (function).
@item
@ref{❨48❩, , @t{*default-external-format*}}@: (special variable).
@item
@ref{❨50❩, , @t{str-strm-file}}@: (type).
@item
@ref{❨47❩, , @t{with-csv-output-stream}}@: (macro).
@item
@ref{❨52❩, , @t{with-input-stream}}@: (macro).
@end itemize
@end table

@node The dfio/write․lisp file, The dfio/delimited-text․lisp file, The dfio/utils․lisp file, Lisp files
@subsection @t{dfio/write.lisp}
@anchor{❨8❩}@c
@fileindex{write.lisp}@c
@table @strong
@item Dependency
@ref{❨7❩, , @t{utils.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨43❩, , @t{save}}@: (function).
@item
@ref{❨39❩, , @t{write-df}}@: (function).
@item
@ref{❨40❩, , @t{write-properties}}@: (function).
@end itemize
@end table

@node The dfio/delimited-text․lisp file, , The dfio/write․lisp file, Lisp files
@subsection @t{dfio/delimited-text.lisp}
@anchor{❨9❩}@c
@fileindex{delimited-text.lisp}@c
@table @strong
@item Dependency
@ref{❨8❩, , @t{write.lisp}}@: (file).
@item Source
@ref{❨2❩, , @t{dfio.asd}}.
@item Parent Component
@ref{❨1❩, , @t{dfio}}@: (system).
@item Public Interface
@itemize @bullet
@item
@ref{❨45❩, , @t{read-csv}}@: (function).
@item
@ref{❨38❩, , @t{write-csv}}@: (function).
@end itemize
@item Internals
@ref{❨51❩, , @t{csv-to-data-columns}}@: (function).
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The dfio․decimal package::
* The dfio․string-table package::
* The dfio package::
* The dfio․data-column package::
@end menu


@c ------------------------
@c The dfio.decimal package
@c ------------------------
@node The dfio․decimal package, The dfio․string-table package, Packages, Packages
@section @t{dfio.decimal}
@anchor{❨10❩}@c
@packageindex{dfio.decimal}@c
@table @strong
@item Source
@ref{❨3❩, , @t{pkgdcl.lisp}}.
@item Use List
@itemize @bullet
@item
@t{anaphora}.
@item
@t{common-lisp}.
@item
@t{let-plus}.
@end itemize
@item Used By List
@ref{❨13❩, , @t{dfio.data-column}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨18❩, , @t{parse-rational}}@: (function).
@item
@ref{❨15❩, , @t{parse-rational-error}}@: (condition).
@item
@ref{❨14❩, , @t{parse-real}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨21❩, , @t{+exponent-chars+}}@: (special variable).
@item
@ref{❨19❩, , @t{gobble-positive-integer}}@: (function).
@item
@ref{❨20❩, , @t{gobble-sign}}@: (function).
@end itemize
@end table


@c -----------------------------
@c The dfio.string-table package
@c -----------------------------
@node The dfio․string-table package, The dfio package, The dfio․decimal package, Packages
@section @t{dfio.string-table}
@anchor{❨11❩}@c
@packageindex{dfio.string-table}@c
@table @strong
@item Source
@ref{❨3❩, , @t{pkgdcl.lisp}}.
@item Use List
@itemize @bullet
@item
@t{alexandria}.
@item
@t{anaphora}.
@item
@t{common-lisp}.
@item
@t{let-plus}.
@end itemize
@item Used By List
@ref{❨13❩, , @t{dfio.data-column}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨25❩, , @t{string-table}}@: (function).
@item
@ref{❨26❩, , @t{string-table}}@: (structure).
@item
@ref{❨64❩, , @t{string-table}}@: (slot).
@item
@ref{❨30❩, , @t{string-table-add}}@: (function).
@item
@ref{❨24❩, , @t{string-table-count}}@: (function).
@item
@ref{❨29❩, , @t{string-table-duplicate}}@: (condition).
@item
@ref{❨23❩, , @t{string-table-intern}}@: (function).
@item
@ref{❨22❩, , @t{string-table-lookup}}@: (function).
@item
@ref{❨31❩, , @t{string-table-not-found}}@: (condition).
@item
@ref{❨28❩, , @t{string-table-strings}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨36❩, , @t{copy-string-table}}@: (function).
@item
@ref{❨32❩, , @t{string-table-get}}@: (function).
@item
@ref{❨33❩, , @t{(setf string-table-get)}}@: (function).
@item
@ref{❨37❩, , @t{string-table-p}}@: (function).
@item
@ref{❨34❩, , @t{string-table-table}}@: (reader).
@item
@ref{❨35❩, , @t{(setf string-table-table)}}@: (writer).
@end itemize
@end table


@c ----------------
@c The dfio package
@c ----------------
@node The dfio package, The dfio․data-column package, The dfio․string-table package, Packages
@section @t{dfio}
@anchor{❨12❩}@c
@packageindex{dfio}@c
@table @strong
@item Source
@ref{❨3❩, , @t{pkgdcl.lisp}}.
@item Use List
@itemize @bullet
@item
@t{alexandria}.
@item
@t{anaphora}.
@item
@t{common-lisp}.
@item
@t{data-frame}.
@item
@ref{❨13❩, , @t{dfio.data-column}}.
@item
@t{let-plus}.
@end itemize
@item Used By List
@t{lisp-stat}.
@item Public Interface
@itemize @bullet
@item
@ref{❨45❩, , @t{read-csv}}@: (function).
@item
@ref{❨43❩, , @t{save}}@: (function).
@item
@ref{❨42❩, , @t{string-to-keyword}}@: (function).
@item
@ref{❨44❩, , @t{string-to-symbol}}@: (function).
@item
@ref{❨41❩, , @t{symbol-name-to-pathname}}@: (function).
@item
@ref{❨38❩, , @t{write-csv}}@: (function).
@item
@ref{❨39❩, , @t{write-df}}@: (function).
@item
@ref{❨40❩, , @t{write-properties}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨46❩, , @t{%in-stream}}@: (function).
@item
@ref{❨49❩, , @t{%out-stream}}@: (function).
@item
@ref{❨48❩, , @t{*default-external-format*}}@: (special variable).
@item
@ref{❨51❩, , @t{csv-to-data-columns}}@: (function).
@item
@ref{❨50❩, , @t{str-strm-file}}@: (type).
@item
@ref{❨47❩, , @t{with-csv-output-stream}}@: (macro).
@item
@ref{❨52❩, , @t{with-input-stream}}@: (macro).
@end itemize
@end table


@c ----------------------------
@c The dfio.data-column package
@c ----------------------------
@node The dfio․data-column package, , The dfio package, Packages
@section @t{dfio.data-column}
@anchor{❨13❩}@c
@packageindex{dfio.data-column}@c
@table @strong
@item Source
@ref{❨3❩, , @t{pkgdcl.lisp}}.
@item Use List
@itemize @bullet
@item
@t{anaphora}.
@item
@t{common-lisp}.
@item
@ref{❨10❩, , @t{dfio.decimal}}.
@item
@ref{❨11❩, , @t{dfio.string-table}}.
@item
@t{let-plus}.
@end itemize
@item Used By List
@ref{❨12❩, , @t{dfio}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨53❩, , @t{data-column}}@: (function).
@item
@ref{❨54❩, , @t{data-column}}@: (class).
@item
@ref{❨65❩, , @t{data-column-add}}@: (function).
@item
@ref{❨67❩, , @t{data-column-counts}}@: (function).
@item
@ref{❨66❩, , @t{data-column-vector}}@: (function).
@end itemize
@item Internals
@ref{❨68❩, , @t{non-negative-integer}}@: (type).
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public ordinary functions::
* Public standalone methods::
* Public conditions::
* Public structures::
* Public classes::
@end menu

@node Public ordinary functions, Public standalone methods, Public Interface, Public Interface
@subsection Ordinary functions
@deffn {Function} {data-column} (&key map-alist default-float-format)
@anchor{❨53❩}@c
@functionsubindex{data-column}@c
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@end table
@end deffn
@deffn {Function} {data-column-add} (data-column string)
@anchor{❨65❩}@c
@functionsubindex{data-column-add}@c
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@end table
@end deffn
@deffn {Function} {data-column-counts} (data-column)
@anchor{❨67❩}@c
@functionsubindex{data-column-counts}@c
Return the counts.
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@end table
@end deffn
@deffn {Function} {data-column-vector} (data-column)
@anchor{❨66❩}@c
@functionsubindex{data-column-vector}@c
Return the collected elements as a vector.
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-rational} (string &key start end exponent-chars)
@anchor{❨18❩}@c
@functionsubindex{parse-rational}@c
Parse a decimal rational in (subseq string start end) of the form [sign][whole][.[fraction]][exponent] where@*

sign  ::= + | - | empty@*
whole ::= digit*@*
fraction ::= digit*@*
exponent ::= exponent-char[sign]digit+@*

with the restriction that WHOLE and FRACTION cannot be empty at the same time.  EXPONENT-CHAR is a string and contains the valid exponent chars.@*

Whitespace is NOT trimmed@comma{} and leads to an error.  In case of a parsing failure@comma{} PARSE-RATIONAL-ERROR is used.@*

Return (values NUMBER DECIMAL-DOT? EXPONENT-CHAR).  NUMBER is a RATIONAL@comma{} DECIMAL-DOT? is T when a decimal dot is present@comma{} otherwise NIL@comma{} EXPONENT-CHAR contains the exponent character@comma{} NIL if not present.

Numbers of the form .112 and 112. are valid syntax@comma{} representing 0.112 and 112.0@comma{} respectively.@*

Examples:@*

  (parse-rational "7")    => (values 7 NIL NIL)@*
  (parse-rational "7.")   => (values 7 T NIL)@*
  (parse-rational "0.7")  => (values 7/10 T NIL)@*
  (parse-rational ".7")   => (values 7/10 T NIL)@*
  (parse-rational "7.e2") => (values 700 T @hashchar{}e)@*
  (parse-rational ".7d1") => (values 7 T @hashchar{}d)
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-real} (string &key start end s-float f-float d-float l-float e-float)
@anchor{❨14❩}@c
@functionsubindex{parse-real}@c
Wrapper for PARSE-RATIONAL@comma{} converting non-integers to floats.  The float type is determined by the -float arguments for each exponent character.  Integers are not converted to floats.  Return a single value@comma{} type of (or integer float).

See PARSE-RATIONAL for accepted formats@comma{} errors@comma{} etc.
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@end table
@end deffn
@deffn {Function} {read-csv} (source &key skip-first-row? column-keys-or-function package map-alist)
@anchor{❨45❩}@c
@functionsubindex{read-csv}@c
Read a CSV file@comma{} stream@comma{} string or URL into a DATA-FRAME@comma{} which is returned.@*
When SKIP-FIRST-ROW?@comma{} the first row is read separately and COLUMN-KEYS-OR-FUNCTION is used to form column keys.@*
When COLUMN-KEYS-OR-FUNCTION is a sequence@comma{} it is used for column keys@comma{} regardless of the value of SKIP-FIRST-ROW?.@*
PACKAGE indicates the package to intern column names into.@*

MAP-ALIST maps values during the import. This is useful if you want special mappings for missing@comma{} though the mechanism is general.
Returns two values@comma{} the data-frame and the source
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨9❩, , @t{delimited-text.lisp}}.
@end table
@end deffn
@deffn {Function} {save} (data-symbol pathspec &optional suffix)
@anchor{❨43❩}@c
@functionsubindex{save}@c
Save DF in the file named by PATHSPEC.  By default@comma{} a suffix of .lisp is added.
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨8❩, , @t{write.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table} (&key table)
@anchor{❨25❩}@c
@functionsubindex{string-table}@c
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-add} (string-table string &optional value)
@anchor{❨30❩}@c
@functionsubindex{string-table-add}@c
Add STRING mapped to VALUE to STRING-TABLE@comma{} raising STRING-TABLE-DUPLICATE if STRING is already in the table.  Return VALUE. 
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-count} (string-table)
@anchor{❨24❩}@c
@functionsubindex{string-table-count}@c
Number of distinct strings in the table.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-intern} (string-table string &optional new-value)
@anchor{❨23❩}@c
@functionsubindex{string-table-intern}@c
If STRING is already in STRING-TABLE@comma{} return its value@comma{} otherwise add it and return NEW-VALUE.  When used with the default argument for NEW-VALUE@comma{} EQUAL strings are always mapped to values that are EQ.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-lookup} (string-table string)
@anchor{❨22❩}@c
@functionsubindex{string-table-lookup}@c
Return the value corresponding to STRING in STRING-TABLE@comma{} or raise the STRING-TABLE-NOT-FOUND error.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-strings} (string-table)
@anchor{❨28❩}@c
@functionsubindex{string-table-strings}@c
List of strings in STRING-TABLE.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-to-keyword} (string)
@anchor{❨42❩}@c
@functionsubindex{string-to-keyword}@c
Map string to a keyword.@*

The current implementation replaces @hashchar{}. and @hashchar{}space with a @hashchar{}-@comma{} and upcases all other characters.
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {string-to-symbol} (string)
@anchor{❨44❩}@c
@functionsubindex{string-to-symbol}@c
Map STRING to a symbol in PACKAGE@comma{} replacing @hashchar{}.@comma{} @hashchar{}_ and @hashchar{}space with a @hashchar{}-@comma{} and upcasing all other characters. Exports symbol.
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {symbol-name-to-pathname} (string)
@anchor{❨41❩}@c
@functionsubindex{symbol-name-to-pathname}@c
Map the symbol-name of S to something that can be part of a logical-pathname
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {write-csv} (df stream &key add-first-row separator quote eol)
@anchor{❨38❩}@c
@functionsubindex{write-csv}@c
Write DF to STRING-OR-STREAM in CSV format. STRING-OR-STREAM can be a STREAM@comma{} a STRING or a file PATHSPEC.@*

Keywords:@*
    string-or-stream: stream to write to. Default: nil@comma{} returning a string@*
    add-first-row:    add column names as the first row@*
    separator: separator to use when reading or writing CSV files. A character. By default@comma{} a comma: @hashchar{}@comma{}@*
    quote:     quote character to use when reading or writing CSV files. A character. By default@comma{} a double-quote: @hashchar{}"
    eol:       line ending to use when writing CSV files. A string. By default@comma{} +CRLF+ as specified by creativyst.

Notes:@*
    The :newline keyword requires a sequence@comma{} so use :newline '(@hashchar{}newline)
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨9❩, , @t{delimited-text.lisp}}.
@end table
@end deffn
@deffn {Function} {write-df} (data-symbol &optional stream)
@anchor{❨39❩}@c
@functionsubindex{write-df}@c
Write DATA-SYMBOL to STREAM in a format suitable for reading back in with the Lisp reader
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨8❩, , @t{write.lisp}}.
@end table
@end deffn
@deffn {Function} {write-properties} (data-symbol property &optional stream)
@anchor{❨40❩}@c
@functionsubindex{write-properties}@c
Write the variable PROPERTY strings to stream so they can be read back in when LOADed from a lisp file.  By convention@comma{} the name of the function that sets the property is the same as the property.
Example (write-property mtcars :label)
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨8❩, , @t{write.lisp}}.
@end table
@end deffn

@node Public standalone methods, Public conditions, Public ordinary functions, Public Interface
@subsection Standalone methods
@deffn {Method} {print-object} ((string-table @ref{❨26❩, , @t{string-table}}) stream)
@anchor{❨83❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn

@node Public conditions, Public structures, Public standalone methods, Public Interface
@subsection Conditions
@deftp {Condition} {parse-rational-error}
@anchor{❨15❩}@c
@conditionsubindex{parse-rational-error}@c
Error used by parse-rational and parse-real.
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@item Direct superclasses
@t{error}.
@item Direct slots
@defvr {Slot} {string}
@anchor{❨16❩}@c
@slotsubindex{string}@c
@table @strong
@item Package
@t{common-lisp}.
@item Initform
@t{(quote nil)}
@item Initargs
@t{:string}
@end table
@end defvr
@defvr {Slot} {message}
@anchor{❨17❩}@c
@slotsubindex{message}@c
@table @strong
@item Initform
@t{(quote nil)}
@item Initargs
@t{:message}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {string-table-duplicate}
@anchor{❨29❩}@c
@conditionsubindex{string-table-duplicate}@c
String is already in the table.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@item Direct superclasses
@t{error}.
@end table
@end deftp
@deftp {Condition} {string-table-not-found}
@anchor{❨31❩}@c
@conditionsubindex{string-table-not-found}@c
String not found in table.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@item Direct superclasses
@t{error}.
@end table
@end deftp

@node Public structures, Public classes, Public conditions, Public Interface
@subsection Structures
@deftp {Structure} {string-table}
@anchor{❨26❩}@c
@structuresubindex{string-table}@c
A table of distinct strings@comma{} optionally mapping each one to a value.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct methods
@ref{❨83❩, , @t{print-object}}.
@item Direct slots
@defvr {Slot} {table}
@anchor{❨27❩}@c
@slotsubindex{table}@c
@table @strong
@item Type
@t{hash-table}
@item Initform
@t{(make-hash-table :test (function equalp))}
@item Readers
@ref{❨34❩, , @t{string-table-table}}.
@item Writers
@ref{❨35❩, , @t{(setf string-table-table)}}.
@end table
@end defvr
@end table
@end deftp

@node Public classes, , Public structures, Public Interface
@subsection Classes
@deftp {Class} {data-column}
@anchor{❨54❩}@c
@classsubindex{data-column}@c
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@item Direct slots
@defvr {Slot} {reverse-elements}
@anchor{❨55❩}@c
@slotsubindex{reverse-elements}@c
@table @strong
@item Type
@t{list}
@end table
@end defvr
@defvr {Slot} {default-float-format}
@anchor{❨56❩}@c
@slotsubindex{default-float-format}@c
@table @strong
@item Type
@t{symbol}
@item Initargs
@t{:default-float-format}
@end table
@end defvr
@defvr {Slot} {float-count}
@anchor{❨57❩}@c
@slotsubindex{float-count}@c
@table @strong
@item Type
@t{dfio.data-column::non-negative-integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {integer-count}
@anchor{❨58❩}@c
@slotsubindex{integer-count}@c
@table @strong
@item Type
@t{dfio.data-column::non-negative-integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {integer-min}
@anchor{❨59❩}@c
@slotsubindex{integer-min}@c
@table @strong
@item Type
@t{integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {integer-max}
@anchor{❨60❩}@c
@slotsubindex{integer-max}@c
@table @strong
@item Type
@t{integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {map-count}
@anchor{❨61❩}@c
@slotsubindex{map-count}@c
@table @strong
@item Type
@t{dfio.data-column::non-negative-integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {map-table}
@anchor{❨62❩}@c
@slotsubindex{map-table}@c
@table @strong
@item Type
@t{dfio.string-table:string-table}
@item Initargs
@t{:map-table}
@end table
@end defvr
@defvr {Slot} {string-count}
@anchor{❨63❩}@c
@slotsubindex{string-count}@c
@table @strong
@item Type
@t{dfio.data-column::non-negative-integer}
@item Initform
@t{0}
@end table
@end defvr
@defvr {Slot} {string-table}
@anchor{❨64❩}@c
@slotsubindex{string-table}@c
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Type
@t{dfio.string-table:string-table}
@item Initform
@t{(dfio.string-table:string-table)}
@end table
@end defvr
@end table
@end deftp


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private types::
@end menu

@node Private special variables, Private macros, Internals, Internals
@subsection Special variables
@defvr {Special Variable} {*default-external-format*}
@anchor{❨48❩}@c
@specialsubindex{*default-external-format*}@c
External format used for opening files
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {+exponent-chars+}
@anchor{❨21❩}@c
@specialsubindex{+exponent-chars+}@c
Default exponent characters.
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {with-csv-output-stream} ((name inp) &body body)
@anchor{❨47❩}@c
@macrosubindex{with-csv-output-stream}@c
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Macro} {with-input-stream} ((name inp) &body body)
@anchor{❨52❩}@c
@macrosubindex{with-input-stream}@c
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn

@node Private ordinary functions, Private types, Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%in-stream} (source)
@anchor{❨46❩}@c
@functionsubindex{%in-stream}@c
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {%out-stream} (source)
@anchor{❨49❩}@c
@functionsubindex{%out-stream}@c
creates a stream from the given thing@comma{} trying to DWIM
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-string-table} (instance)
@anchor{❨36❩}@c
@functionsubindex{copy-string-table}@c
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {csv-to-data-columns} (source skip-first-row? &key map-alist)
@anchor{❨51❩}@c
@functionsubindex{csv-to-data-columns}@c
Read a CSV file (or stream@comma{} or string)@comma{} accumulate the values in DATA-COLUMNs@comma{} return a list of these.  Rows are checked to have the same number of elements.

When SKIP-FIRST-ROW?@comma{} the first row is read separately and returned as the second value (list of strings)@comma{} otherwise it is considered data like all other rows.
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨9❩, , @t{delimited-text.lisp}}.
@end table
@end deffn
@deffn {Function} {gobble-positive-integer} (string start end)
@anchor{❨19❩}@c
@functionsubindex{gobble-positive-integer}@c
If (SUBSEQ STRING START END) starts with a nonnegative integer (ie a sequence of digits 0-9)@comma{} return the integer and position at which it ends as two values.

Otherwise@comma{} return NIL and 0.@*

START < END has to hold@comma{} END cannot be NIL.  Consequences are undefined when START >= END.
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@end table
@end deffn
@deffn {Function} {gobble-sign} (string start)
@anchor{❨20❩}@c
@functionsubindex{gobble-sign}@c
Return (values SIGNUM INDEX)@comma{} where SIGNUM is -1 or 1 depending on whether (CHAR STRING START) was a sign@comma{} and INDEX is the index of the subsequent character (START or START+1).
@table @strong
@item Package
@ref{❨10❩, , @t{dfio.decimal}}.
@item Source
@ref{❨4❩, , @t{decimal.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-get} (string-table string)
@anchor{❨32❩}@c
@functionsubindex{string-table-get}@c
Synonym for GETHASH@comma{} used internally.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {(setf string-table-get)} (string-table string)
@anchor{❨33❩}@c
@functionsubindex{(setf string-table-get)}@c
Synonym for (SETF GETHASH)@comma{} used internally@comma{} checks that STRING is a string.
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Function} {string-table-p} (object)
@anchor{❨37❩}@c
@functionsubindex{string-table-p}@c
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@end table
@end deffn
@deffn {Reader} {string-table-table} (instance)
@anchor{❨34❩}@c
@functionsubindex{string-table-table}@c
@deffnx {Writer} {(setf string-table-table)} (instance)
@anchor{❨35❩}@c
@functionsubindex{(setf string-table-table)}@c
@table @strong
@item Package
@ref{❨11❩, , @t{dfio.string-table}}.
@item Source
@ref{❨5❩, , @t{string-table.lisp}}.
@item Target Slot
@ref{❨27❩, , @t{table}}.
@end table
@end deffn

@node Private types, , Private ordinary functions, Internals
@subsection Types
@deftp {Type} {non-negative-integer} ()
@anchor{❨68❩}@c
@typesubindex{non-negative-integer}@c
@table @strong
@item Package
@ref{❨13❩, , @t{dfio.data-column}}.
@item Source
@ref{❨6❩, , @t{data-column.lisp}}.
@end table
@end deftp
@deftp {Type} {str-strm-file} ()
@anchor{❨50❩}@c
@typesubindex{str-strm-file}@c
@table @strong
@item Package
@ref{❨12❩, , @t{dfio}}.
@item Source
@ref{❨7❩, , @t{utils.lisp}}.
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c dfio.texi ends here
