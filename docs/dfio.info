This is dfio.info, produced by makeinfo version 6.8 from dfio.texi.

     Copyright © 2019-2022 Steve Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.
INFO-DIR-SECTION Lisp-Stat
START-INFO-DIR-ENTRY
* Data Frame I/O Reference Manual: (dfio). The Data Frame I/O Reference Manual.
END-INFO-DIR-ENTRY


File: dfio.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

The Data Frame I/O Reference Manual
***********************************

This is the Data Frame I/O Reference Manual, version 1.0.0, generated
automatically by Declt version 4.0b2.

* Menu:

* Copying:: The Microsoft Public License
* Systems:: The systems documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types

     Copyright © 2019-2022 Steve Nunez

     Permission is granted to make and distribute verbatim copies of
     this manual provided the copyright notice and this permission
     notice are preserved on all copies.

     Permission is granted to copy and distribute modified versions of
     this manual under the conditions for verbatim copying, provided
     also that the section entitled “Copying” is included exactly as in
     the original.

     Permission is granted to copy and distribute translations of this
     manual into another language, under the above conditions for
     modified versions, except that this permission notice may be
     translated as well.


File: dfio.info,  Node: Copying,  Next: Systems,  Prev: Top,  Up: Top

Copying
*******

     This program is distributed under the terms of the Microsoft Public
     License.


File: dfio.info,  Node: Systems,  Next: Files,  Prev: Copying,  Up: Top

1 Systems
*********

The main system appears first, followed by any subsystem dependency.

* Menu:

* The dfio system::


File: dfio.info,  Node: The dfio system,  Prev: Systems,  Up: Systems

1.1 dfio
========

Common Lisp library for reading and writing data-frames
*Long Name*
     Data frame I/O
*Author*
     Steve Nunez <<steve@symbolics.tech>>
*Source Control*
     (GIT https://github.com/Lisp-Stat/dfio.git)
*Bug Tracker*
     <https://github.com/Lisp-Stat/dfio/issues>
*License*
     MS-PL
*Long Description*
     DFIO is used to read and write data frames from string, streams or
     disk.  When building a library like this, one question that needs
     to be answered is "where do you draw the line on formats?".  For
     example, should DFIO read/write JSON? The answer to that question
     is ’no’, and the reason is that there are many JSON formats – they
     are applicaton specific.  Application specific format should be
     read in an application specific package, and this is the case, for
     example, with Vega.  Formats like CSV, HD5 or Feather are
     application agnostic and should be included in DFIO.
*Version*
     1.0.0
*Dependencies*
        • alexandria (system).
        • anaphora (system).
        • data-frame (system).
        • dexador (system).
        • fare-csv (system).
        • let-plus (system).
*Source*
     *note dfio.asd: ❨2❩.
*Child Components*
        • *note pkgdcl.lisp: ❨3❩. (file).
        • *note decimal.lisp: ❨4❩. (file).
        • *note string-table.lisp: ❨5❩. (file).
        • *note data-column.lisp: ❨6❩. (file).
        • *note utils.lisp: ❨7❩. (file).
        • *note write.lisp: ❨8❩. (file).
        • *note delimited-text.lisp: ❨9❩. (file).


File: dfio.info,  Node: Files,  Next: Packages,  Prev: Systems,  Up: Top

2 Files
*******

Files are sorted by type and then listed depth-first from the systems
components trees.

* Menu:

* Lisp files::


File: dfio.info,  Node: Lisp files,  Prev: Files,  Up: Files

2.1 Lisp
========

* Menu:

* The dfio/dfio․asd file::
* The dfio/pkgdcl․lisp file::
* The dfio/decimal․lisp file::
* The dfio/string-table․lisp file::
* The dfio/data-column․lisp file::
* The dfio/utils․lisp file::
* The dfio/write․lisp file::
* The dfio/delimited-text․lisp file::


File: dfio.info,  Node: The dfio/dfio․asd file,  Next: The dfio/pkgdcl․lisp file,  Prev: Lisp files,  Up: Lisp files

2.1.1 dfio/dfio.asd
-------------------

*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*ASDF Systems*
     *note dfio: ❨1❩.


File: dfio.info,  Node: The dfio/pkgdcl․lisp file,  Next: The dfio/decimal․lisp file,  Prev: The dfio/dfio․asd file,  Up: Lisp files

2.1.2 dfio/pkgdcl.lisp
----------------------

*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Packages*
        • *note dfio.decimal: ❨10❩.
        • *note dfio.string-table: ❨11❩.
        • *note dfio: ❨12❩.
        • *note dfio.data-column: ❨13❩.


File: dfio.info,  Node: The dfio/decimal․lisp file,  Next: The dfio/string-table․lisp file,  Prev: The dfio/pkgdcl․lisp file,  Up: Lisp files

2.1.3 dfio/decimal.lisp
-----------------------

*Dependency*
     *note pkgdcl.lisp: ❨3❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note parse-rational: ❨18❩. (function).
        • *note parse-rational-error: ❨15❩. (condition).
        • *note parse-real: ❨14❩. (function).
*Internals*
        • *note +exponent-chars+: ❨21❩. (special variable).
        • *note gobble-positive-integer: ❨19❩. (function).
        • *note gobble-sign: ❨20❩. (function).


File: dfio.info,  Node: The dfio/string-table․lisp file,  Next: The dfio/data-column․lisp file,  Prev: The dfio/decimal․lisp file,  Up: Lisp files

2.1.4 dfio/string-table.lisp
----------------------------

*Dependency*
     *note decimal.lisp: ❨4❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note print-object: ❨83❩. (method).
        • *note string-table: ❨25❩. (function).
        • *note string-table: ❨26❩. (structure).
        • *note string-table-add: ❨30❩. (function).
        • *note string-table-count: ❨24❩. (function).
        • *note string-table-duplicate: ❨29❩. (condition).
        • *note string-table-intern: ❨23❩. (function).
        • *note string-table-lookup: ❨22❩. (function).
        • *note string-table-not-found: ❨31❩. (condition).
        • *note string-table-strings: ❨28❩. (function).
*Internals*
        • *note copy-string-table: ❨36❩. (function).
        • *note string-table-get: ❨32❩. (function).
        • *note (setf string-table-get): ❨33❩. (function).
        • *note string-table-p: ❨37❩. (function).
        • *note string-table-table: ❨34❩. (reader).
        • *note (setf string-table-table): ❨35❩. (writer).


File: dfio.info,  Node: The dfio/data-column․lisp file,  Next: The dfio/utils․lisp file,  Prev: The dfio/string-table․lisp file,  Up: Lisp files

2.1.5 dfio/data-column.lisp
---------------------------

*Dependency*
     *note string-table.lisp: ❨5❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note data-column: ❨53❩. (function).
        • *note data-column: ❨54❩. (class).
        • *note data-column-add: ❨65❩. (function).
        • *note data-column-counts: ❨67❩. (function).
        • *note data-column-vector: ❨66❩. (function).
*Internals*
     *note non-negative-integer: ❨68❩. (type).


File: dfio.info,  Node: The dfio/utils․lisp file,  Next: The dfio/write․lisp file,  Prev: The dfio/data-column․lisp file,  Up: Lisp files

2.1.6 dfio/utils.lisp
---------------------

*Dependency*
     *note data-column.lisp: ❨6❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note string-to-keyword: ❨42❩. (function).
        • *note string-to-symbol: ❨44❩. (function).
        • *note symbol-name-to-pathname: ❨41❩. (function).
*Internals*
        • *note %in-stream: ❨46❩. (function).
        • *note %out-stream: ❨49❩. (function).
        • *note *default-external-format*: ❨48❩. (special variable).
        • *note str-strm-file: ❨50❩. (type).
        • *note with-csv-output-stream: ❨47❩. (macro).
        • *note with-input-stream: ❨52❩. (macro).


File: dfio.info,  Node: The dfio/write․lisp file,  Next: The dfio/delimited-text․lisp file,  Prev: The dfio/utils․lisp file,  Up: Lisp files

2.1.7 dfio/write.lisp
---------------------

*Dependency*
     *note utils.lisp: ❨7❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note save: ❨43❩. (function).
        • *note write-df: ❨39❩. (function).
        • *note write-properties: ❨40❩. (function).


File: dfio.info,  Node: The dfio/delimited-text․lisp file,  Prev: The dfio/write․lisp file,  Up: Lisp files

2.1.8 dfio/delimited-text.lisp
------------------------------

*Dependency*
     *note write.lisp: ❨8❩. (file).
*Source*
     *note dfio.asd: ❨2❩.
*Parent Component*
     *note dfio: ❨1❩. (system).
*Public Interface*
        • *note read-csv: ❨45❩. (function).
        • *note write-csv: ❨38❩. (function).
*Internals*
     *note csv-to-data-columns: ❨51❩. (function).


File: dfio.info,  Node: Packages,  Next: Definitions,  Prev: Files,  Up: Top

3 Packages
**********

Packages are listed by definition order.

* Menu:

* The dfio․decimal package::
* The dfio․string-table package::
* The dfio package::
* The dfio․data-column package::


File: dfio.info,  Node: The dfio․decimal package,  Next: The dfio․string-table package,  Prev: Packages,  Up: Packages

3.1 dfio.decimal
================

*Source*
     *note pkgdcl.lisp: ❨3❩.
*Use List*
        • anaphora.
        • common-lisp.
        • let-plus.
*Used By List*
     *note dfio.data-column: ❨13❩.
*Public Interface*
        • *note parse-rational: ❨18❩. (function).
        • *note parse-rational-error: ❨15❩. (condition).
        • *note parse-real: ❨14❩. (function).
*Internals*
        • *note +exponent-chars+: ❨21❩. (special variable).
        • *note gobble-positive-integer: ❨19❩. (function).
        • *note gobble-sign: ❨20❩. (function).


File: dfio.info,  Node: The dfio․string-table package,  Next: The dfio package,  Prev: The dfio․decimal package,  Up: Packages

3.2 dfio.string-table
=====================

*Source*
     *note pkgdcl.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • let-plus.
*Used By List*
     *note dfio.data-column: ❨13❩.
*Public Interface*
        • *note string-table: ❨25❩. (function).
        • *note string-table: ❨26❩. (structure).
        • *note string-table: ❨64❩. (slot).
        • *note string-table-add: ❨30❩. (function).
        • *note string-table-count: ❨24❩. (function).
        • *note string-table-duplicate: ❨29❩. (condition).
        • *note string-table-intern: ❨23❩. (function).
        • *note string-table-lookup: ❨22❩. (function).
        • *note string-table-not-found: ❨31❩. (condition).
        • *note string-table-strings: ❨28❩. (function).
*Internals*
        • *note copy-string-table: ❨36❩. (function).
        • *note string-table-get: ❨32❩. (function).
        • *note (setf string-table-get): ❨33❩. (function).
        • *note string-table-p: ❨37❩. (function).
        • *note string-table-table: ❨34❩. (reader).
        • *note (setf string-table-table): ❨35❩. (writer).


File: dfio.info,  Node: The dfio package,  Next: The dfio․data-column package,  Prev: The dfio․string-table package,  Up: Packages

3.3 dfio
========

*Source*
     *note pkgdcl.lisp: ❨3❩.
*Use List*
        • alexandria.
        • anaphora.
        • common-lisp.
        • data-frame.
        • *note dfio.data-column: ❨13❩.
        • let-plus.
*Used By List*
     lisp-stat.
*Public Interface*
        • *note read-csv: ❨45❩. (function).
        • *note save: ❨43❩. (function).
        • *note string-to-keyword: ❨42❩. (function).
        • *note string-to-symbol: ❨44❩. (function).
        • *note symbol-name-to-pathname: ❨41❩. (function).
        • *note write-csv: ❨38❩. (function).
        • *note write-df: ❨39❩. (function).
        • *note write-properties: ❨40❩. (function).
*Internals*
        • *note %in-stream: ❨46❩. (function).
        • *note %out-stream: ❨49❩. (function).
        • *note *default-external-format*: ❨48❩. (special variable).
        • *note csv-to-data-columns: ❨51❩. (function).
        • *note str-strm-file: ❨50❩. (type).
        • *note with-csv-output-stream: ❨47❩. (macro).
        • *note with-input-stream: ❨52❩. (macro).


File: dfio.info,  Node: The dfio․data-column package,  Prev: The dfio package,  Up: Packages

3.4 dfio.data-column
====================

*Source*
     *note pkgdcl.lisp: ❨3❩.
*Use List*
        • anaphora.
        • common-lisp.
        • *note dfio.decimal: ❨10❩.
        • *note dfio.string-table: ❨11❩.
        • let-plus.
*Used By List*
     *note dfio: ❨12❩.
*Public Interface*
        • *note data-column: ❨53❩. (function).
        • *note data-column: ❨54❩. (class).
        • *note data-column-add: ❨65❩. (function).
        • *note data-column-counts: ❨67❩. (function).
        • *note data-column-vector: ❨66❩. (function).
*Internals*
     *note non-negative-integer: ❨68❩. (type).


File: dfio.info,  Node: Definitions,  Next: Indexes,  Prev: Packages,  Up: Top

4 Definitions
*************

Definitions are sorted by export status, category, package, and then by
lexicographic order.

* Menu:

* Public Interface::
* Internals::


File: dfio.info,  Node: Public Interface,  Next: Internals,  Prev: Definitions,  Up: Definitions

4.1 Public Interface
====================

* Menu:

* Public ordinary functions::
* Public standalone methods::
* Public conditions::
* Public structures::
* Public classes::


File: dfio.info,  Node: Public ordinary functions,  Next: Public standalone methods,  Prev: Public Interface,  Up: Public Interface

4.1.1 Ordinary functions
------------------------

 -- Function: data-column (&key map-alist default-float-format)
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
 -- Function: data-column-add (data-column string)
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
 -- Function: data-column-counts (data-column)
     Return the counts.
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
 -- Function: data-column-vector (data-column)
     Return the collected elements as a vector.
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
 -- Function: parse-rational (string &key start end exponent-chars)
     Parse a decimal rational in (subseq string start end) of the form
     [sign][whole][.[fraction]][exponent] where

     sign ::= + | - | empty
     whole ::= digit*
     fraction ::= digit*
     exponent ::= exponent-char[sign]digit+

     with the restriction that WHOLE and FRACTION cannot be empty at the
     same time.  EXPONENT-CHAR is a string and contains the valid
     exponent chars.

     Whitespace is NOT trimmed, and leads to an error.  In case of a
     parsing failure, PARSE-RATIONAL-ERROR is used.

     Return (values NUMBER DECIMAL-DOT? EXPONENT-CHAR). NUMBER is a
     RATIONAL, DECIMAL-DOT? is T when a decimal dot is present,
     otherwise NIL, EXPONENT-CHAR contains the exponent character, NIL
     if not present.

     Numbers of the form .112 and 112.  are valid syntax, representing
     0.112 and 112.0, respectively.

     Examples:

     (parse-rational "7") => (values 7 NIL NIL)
     (parse-rational "7.")  => (values 7 T NIL)
     (parse-rational "0.7") => (values 7/10 T NIL)
     (parse-rational ".7") => (values 7/10 T NIL)
     (parse-rational "7.e2") => (values 700 T #e)
     (parse-rational ".7d1") => (values 7 T #d)
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.
 -- Function: parse-real (string &key start end s-float f-float d-float
          l-float e-float)
     Wrapper for PARSE-RATIONAL, converting non-integers to floats.  The
     float type is determined by the -float arguments for each exponent
     character.  Integers are not converted to floats.  Return a single
     value, type of (or integer float).

     See PARSE-RATIONAL for accepted formats, errors, etc.
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.
 -- Function: read-csv (source &key skip-first-row?
          column-keys-or-function package map-alist)
     Read a CSV file, stream, string or URL into a DATA-FRAME, which is
     returned.
     When SKIP-FIRST-ROW?, the first row is read separately and
     COLUMN-KEYS-OR-FUNCTION is used to form column keys.
     When COLUMN-KEYS-OR-FUNCTION is a sequence, it is used for column
     keys, regardless of the value of SKIP-FIRST-ROW?.
     PACKAGE indicates the package to intern column names into.

     MAP-ALIST maps values during the import.  This is useful if you
     want special mappings for missing, though the mechanism is general.
     Returns two values, the data-frame and the source
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note delimited-text.lisp: ❨9❩.
 -- Function: save (data-symbol pathspec &optional suffix)
     Save DF in the file named by PATHSPEC. By default, a suffix of
     .lisp is added.
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note write.lisp: ❨8❩.
 -- Function: string-table (&key table)
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-add (string-table string &optional value)
     Add STRING mapped to VALUE to STRING-TABLE, raising
     STRING-TABLE-DUPLICATE if STRING is already in the table.  Return
     VALUE.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-count (string-table)
     Number of distinct strings in the table.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-intern (string-table string &optional
          new-value)
     If STRING is already in STRING-TABLE, return its value, otherwise
     add it and return NEW-VALUE. When used with the default argument
     for NEW-VALUE, EQUAL strings are always mapped to values that are
     EQ.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-lookup (string-table string)
     Return the value corresponding to STRING in STRING-TABLE, or raise
     the STRING-TABLE-NOT-FOUND error.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-strings (string-table)
     List of strings in STRING-TABLE.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-to-keyword (string)
     Map string to a keyword.

     The current implementation replaces #.  and #space with a #-, and
     upcases all other characters.
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Function: string-to-symbol (string)
     Map STRING to a symbol in PACKAGE, replacing #., #_ and #space with
     a #-, and upcasing all other characters.  Exports symbol.
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Function: symbol-name-to-pathname (string)
     Map the symbol-name of S to something that can be part of a
     logical-pathname
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Function: write-csv (df stream &key add-first-row separator quote
          eol)
     Write DF to STRING-OR-STREAM in CSV format.  STRING-OR-STREAM can
     be a STREAM, a STRING or a file PATHSPEC.

     Keywords:
     string-or-stream: stream to write to.  Default: nil, returning a
     string
     add-first-row: add column names as the first row
     separator: separator to use when reading or writing CSV files.  A
     character.  By default, a comma: #,
     quote: quote character to use when reading or writing CSV files.  A
     character.  By default, a double-quote: #" eol: line ending to use
     when writing CSV files.  A string.  By default, +CRLF+ as specified
     by creativyst.

     Notes:
     The :newline keyword requires a sequence, so use :newline
     ’(#newline)
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note delimited-text.lisp: ❨9❩.
 -- Function: write-df (data-symbol &optional stream)
     Write DATA-SYMBOL to STREAM in a format suitable for reading back
     in with the Lisp reader
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note write.lisp: ❨8❩.
 -- Function: write-properties (data-symbol property &optional stream)
     Write the variable PROPERTY strings to stream so they can be read
     back in when LOADed from a lisp file.  By convention, the name of
     the function that sets the property is the same as the property.
     Example (write-property mtcars :label)
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note write.lisp: ❨8❩.


File: dfio.info,  Node: Public standalone methods,  Next: Public conditions,  Prev: Public ordinary functions,  Up: Public Interface

4.1.2 Standalone methods
------------------------

 -- Method: print-object ((string-table *note string-table: ❨26❩.)
          stream)
     *Source*
          *note string-table.lisp: ❨5❩.


File: dfio.info,  Node: Public conditions,  Next: Public structures,  Prev: Public standalone methods,  Up: Public Interface

4.1.3 Conditions
----------------

 -- Condition: parse-rational-error
     Error used by parse-rational and parse-real.
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.
     *Direct superclasses*
          error.
     *Direct slots*
           -- Slot: string
               *Package*
                    common-lisp.
               *Initform*
                    (quote nil)
               *Initargs*
                    :string
           -- Slot: message
               *Initform*
                    (quote nil)
               *Initargs*
                    :message
 -- Condition: string-table-duplicate
     String is already in the table.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
     *Direct superclasses*
          error.
 -- Condition: string-table-not-found
     String not found in table.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
     *Direct superclasses*
          error.


File: dfio.info,  Node: Public structures,  Next: Public classes,  Prev: Public conditions,  Up: Public Interface

4.1.4 Structures
----------------

 -- Structure: string-table
     A table of distinct strings, optionally mapping each one to a
     value.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
     *Direct superclasses*
          structure-object.
     *Direct methods*
          *note print-object: ❨83❩.
     *Direct slots*
           -- Slot: table
               *Type*
                    hash-table
               *Initform*
                    (make-hash-table :test (function equalp))
               *Readers*
                    *note string-table-table: ❨34❩.
               *Writers*
                    *note (setf string-table-table): ❨35❩.


File: dfio.info,  Node: Public classes,  Prev: Public structures,  Up: Public Interface

4.1.5 Classes
-------------

 -- Class: data-column
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
     *Direct slots*
           -- Slot: reverse-elements
               *Type*
                    list
           -- Slot: default-float-format
               *Type*
                    symbol
               *Initargs*
                    :default-float-format
           -- Slot: float-count
               *Type*
                    dfio.data-column::non-negative-integer
               *Initform*
                    0
           -- Slot: integer-count
               *Type*
                    dfio.data-column::non-negative-integer
               *Initform*
                    0
           -- Slot: integer-min
               *Type*
                    integer
               *Initform*
                    0
           -- Slot: integer-max
               *Type*
                    integer
               *Initform*
                    0
           -- Slot: map-count
               *Type*
                    dfio.data-column::non-negative-integer
               *Initform*
                    0
           -- Slot: map-table
               *Type*
                    dfio.string-table:string-table
               *Initargs*
                    :map-table
           -- Slot: string-count
               *Type*
                    dfio.data-column::non-negative-integer
               *Initform*
                    0
           -- Slot: string-table
               *Package*
                    *note dfio.string-table: ❨11❩.
               *Type*
                    dfio.string-table:string-table
               *Initform*
                    (dfio.string-table:string-table)


File: dfio.info,  Node: Internals,  Prev: Public Interface,  Up: Definitions

4.2 Internals
=============

* Menu:

* Private special variables::
* Private macros::
* Private ordinary functions::
* Private types::


File: dfio.info,  Node: Private special variables,  Next: Private macros,  Prev: Internals,  Up: Internals

4.2.1 Special variables
-----------------------

 -- Special Variable: *default-external-format*
     External format used for opening files
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Special Variable: +exponent-chars+
     Default exponent characters.
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.


File: dfio.info,  Node: Private macros,  Next: Private ordinary functions,  Prev: Private special variables,  Up: Internals

4.2.2 Macros
------------

 -- Macro: with-csv-output-stream ((name inp) &body body)
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Macro: with-input-stream ((name inp) &body body)
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.


File: dfio.info,  Node: Private ordinary functions,  Next: Private types,  Prev: Private macros,  Up: Internals

4.2.3 Ordinary functions
------------------------

 -- Function: %in-stream (source)
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Function: %out-stream (source)
     creates a stream from the given thing, trying to DWIM
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.
 -- Function: copy-string-table (instance)
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: csv-to-data-columns (source skip-first-row? &key
          map-alist)
     Read a CSV file (or stream, or string), accumulate the values in
     DATA-COLUMNs, return a list of these.  Rows are checked to have the
     same number of elements.

     When SKIP-FIRST-ROW?, the first row is read separately and returned
     as the second value (list of strings), otherwise it is considered
     data like all other rows.
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note delimited-text.lisp: ❨9❩.
 -- Function: gobble-positive-integer (string start end)
     If (SUBSEQ STRING START END) starts with a nonnegative integer (ie
     a sequence of digits 0-9), return the integer and position at which
     it ends as two values.

     Otherwise, return NIL and 0.

     START < END has to hold, END cannot be NIL. Consequences are
     undefined when START >= END.
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.
 -- Function: gobble-sign (string start)
     Return (values SIGNUM INDEX), where SIGNUM is -1 or 1 depending on
     whether (CHAR STRING START) was a sign, and INDEX is the index of
     the subsequent character (START or START+1).
     *Package*
          *note dfio.decimal: ❨10❩.
     *Source*
          *note decimal.lisp: ❨4❩.
 -- Function: string-table-get (string-table string)
     Synonym for GETHASH, used internally.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: (setf string-table-get) (string-table string)
     Synonym for (SETF GETHASH), used internally, checks that STRING is
     a string.
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Function: string-table-p (object)
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
 -- Reader: string-table-table (instance)
 -- Writer: (setf string-table-table) (instance)
     *Package*
          *note dfio.string-table: ❨11❩.
     *Source*
          *note string-table.lisp: ❨5❩.
     *Target Slot*
          *note table: ❨27❩.


File: dfio.info,  Node: Private types,  Prev: Private ordinary functions,  Up: Internals

4.2.4 Types
-----------

 -- Type: non-negative-integer ()
     *Package*
          *note dfio.data-column: ❨13❩.
     *Source*
          *note data-column.lisp: ❨6❩.
 -- Type: str-strm-file ()
     *Package*
          *note dfio: ❨12❩.
     *Source*
          *note utils.lisp: ❨7❩.


File: dfio.info,  Node: Indexes,  Prev: Definitions,  Up: Top

Appendix A Indexes
******************

* Menu:

* Concept index::
* Function index::
* Variable index::
* Data type index::


File: dfio.info,  Node: Concept index,  Next: Function index,  Prev: Indexes,  Up: Indexes

A.1 Concepts
============


File: dfio.info,  Node: Function index,  Next: Variable index,  Prev: Concept index,  Up: Indexes

A.2 Functions
=============

 [index ]
* Menu:

* %in-stream:                            Private ordinary functions.
                                                              (line   6)
* %out-stream:                           Private ordinary functions.
                                                              (line  11)
* (setf string-table-get):               Private ordinary functions.
                                                              (line  62)
* (setf string-table-table):             Private ordinary functions.
                                                              (line  75)
* copy-string-table:                     Private ordinary functions.
                                                              (line  17)
* csv-to-data-columns:                   Private ordinary functions.
                                                              (line  22)
* data-column:                           Public ordinary functions.
                                                              (line   6)
* data-column-add:                       Public ordinary functions.
                                                              (line  11)
* data-column-counts:                    Public ordinary functions.
                                                              (line  16)
* data-column-vector:                    Public ordinary functions.
                                                              (line  22)
* Function, %in-stream:                  Private ordinary functions.
                                                              (line   7)
* Function, %out-stream:                 Private ordinary functions.
                                                              (line  12)
* Function, (setf string-table-get):     Private ordinary functions.
                                                              (line  63)
* Function, (setf string-table-table):   Private ordinary functions.
                                                              (line  76)
* Function, copy-string-table:           Private ordinary functions.
                                                              (line  18)
* Function, csv-to-data-columns:         Private ordinary functions.
                                                              (line  24)
* Function, data-column:                 Public ordinary functions.
                                                              (line   7)
* Function, data-column-add:             Public ordinary functions.
                                                              (line  12)
* Function, data-column-counts:          Public ordinary functions.
                                                              (line  17)
* Function, data-column-vector:          Public ordinary functions.
                                                              (line  23)
* Function, gobble-positive-integer:     Private ordinary functions.
                                                              (line  36)
* Function, gobble-sign:                 Private ordinary functions.
                                                              (line  49)
* Function, parse-rational:              Public ordinary functions.
                                                              (line  29)
* Function, parse-real:                  Public ordinary functions.
                                                              (line  66)
* Function, read-csv:                    Public ordinary functions.
                                                              (line  78)
* Function, save:                        Public ordinary functions.
                                                              (line  94)
* Function, string-table:                Public ordinary functions.
                                                              (line 101)
* Function, string-table-add:            Public ordinary functions.
                                                              (line 106)
* Function, string-table-count:          Public ordinary functions.
                                                              (line 114)
* Function, string-table-get:            Private ordinary functions.
                                                              (line  57)
* Function, string-table-intern:         Public ordinary functions.
                                                              (line 121)
* Function, string-table-lookup:         Public ordinary functions.
                                                              (line 130)
* Function, string-table-p:              Private ordinary functions.
                                                              (line  70)
* Function, string-table-strings:        Public ordinary functions.
                                                              (line 137)
* Function, string-table-table:          Private ordinary functions.
                                                              (line  75)
* Function, string-to-keyword:           Public ordinary functions.
                                                              (line 143)
* Function, string-to-symbol:            Public ordinary functions.
                                                              (line 152)
* Function, symbol-name-to-pathname:     Public ordinary functions.
                                                              (line 159)
* Function, write-csv:                   Public ordinary functions.
                                                              (line 167)
* Function, write-df:                    Public ordinary functions.
                                                              (line 189)
* Function, write-properties:            Public ordinary functions.
                                                              (line 196)
* gobble-positive-integer:               Private ordinary functions.
                                                              (line  35)
* gobble-sign:                           Private ordinary functions.
                                                              (line  48)
* Macro, with-csv-output-stream:         Private macros.      (line   7)
* Macro, with-input-stream:              Private macros.      (line  12)
* Method, print-object:                  Public standalone methods.
                                                              (line   8)
* parse-rational:                        Public ordinary functions.
                                                              (line  28)
* parse-real:                            Public ordinary functions.
                                                              (line  64)
* print-object:                          Public standalone methods.
                                                              (line   6)
* read-csv:                              Public ordinary functions.
                                                              (line  76)
* save:                                  Public ordinary functions.
                                                              (line  93)
* string-table:                          Public ordinary functions.
                                                              (line 100)
* string-table-add:                      Public ordinary functions.
                                                              (line 105)
* string-table-count:                    Public ordinary functions.
                                                              (line 113)
* string-table-get:                      Private ordinary functions.
                                                              (line  56)
* string-table-intern:                   Public ordinary functions.
                                                              (line 119)
* string-table-lookup:                   Public ordinary functions.
                                                              (line 129)
* string-table-p:                        Private ordinary functions.
                                                              (line  69)
* string-table-strings:                  Public ordinary functions.
                                                              (line 136)
* string-table-table:                    Private ordinary functions.
                                                              (line  74)
* string-to-keyword:                     Public ordinary functions.
                                                              (line 142)
* string-to-symbol:                      Public ordinary functions.
                                                              (line 151)
* symbol-name-to-pathname:               Public ordinary functions.
                                                              (line 158)
* with-csv-output-stream:                Private macros.      (line   6)
* with-input-stream:                     Private macros.      (line  11)
* write-csv:                             Public ordinary functions.
                                                              (line 165)
* write-df:                              Public ordinary functions.
                                                              (line 188)
* write-properties:                      Public ordinary functions.
                                                              (line 195)


File: dfio.info,  Node: Variable index,  Next: Data type index,  Prev: Function index,  Up: Indexes

A.3 Variables
=============

 [index ]
* Menu:

* *default-external-format*:             Private special variables.
                                                               (line  6)
* +exponent-chars+:                      Private special variables.
                                                               (line 12)
* default-float-format:                  Public classes.       (line 15)
* float-count:                           Public classes.       (line 20)
* integer-count:                         Public classes.       (line 25)
* integer-max:                           Public classes.       (line 35)
* integer-min:                           Public classes.       (line 30)
* map-count:                             Public classes.       (line 40)
* map-table:                             Public classes.       (line 45)
* message:                               Public conditions.    (line 22)
* reverse-elements:                      Public classes.       (line 12)
* Slot, default-float-format:            Public classes.       (line 16)
* Slot, float-count:                     Public classes.       (line 21)
* Slot, integer-count:                   Public classes.       (line 26)
* Slot, integer-max:                     Public classes.       (line 36)
* Slot, integer-min:                     Public classes.       (line 31)
* Slot, map-count:                       Public classes.       (line 41)
* Slot, map-table:                       Public classes.       (line 46)
* Slot, message:                         Public conditions.    (line 23)
* Slot, reverse-elements:                Public classes.       (line 13)
* Slot, string:                          Public conditions.    (line 16)
* Slot, string-count:                    Public classes.       (line 51)
* Slot, string-table:                    Public classes.       (line 56)
* Slot, table:                           Public structures.    (line 19)
* Special Variable, *default-external-format*: Private special variables.
                                                               (line  7)
* Special Variable, +exponent-chars+:    Private special variables.
                                                               (line 13)
* string:                                Public conditions.    (line 15)
* string-count:                          Public classes.       (line 50)
* string-table:                          Public classes.       (line 55)
* table:                                 Public structures.    (line 18)


File: dfio.info,  Node: Data type index,  Prev: Variable index,  Up: Indexes

A.4 Data types
==============

 [index ]
* Menu:

* Class, data-column:                    Public classes.       (line  7)
* Condition, parse-rational-error:       Public conditions.    (line  7)
* Condition, string-table-duplicate:     Public conditions.    (line 28)
* Condition, string-table-not-found:     Public conditions.    (line 36)
* data-column:                           Public classes.       (line  6)
* data-column.lisp:                      The dfio/data-column․lisp file.
                                                               (line  6)
* decimal.lisp:                          The dfio/decimal․lisp file.
                                                               (line  6)
* delimited-text.lisp:                   The dfio/delimited-text․lisp file.
                                                               (line  6)
* dfio:                                  The dfio system.      (line  6)
* dfio <1>:                              The dfio package.     (line  6)
* dfio.asd:                              The dfio/dfio․asd file.
                                                               (line  6)
* dfio.data-column:                      The dfio․data-column package.
                                                               (line  6)
* dfio.decimal:                          The dfio․decimal package.
                                                               (line  6)
* dfio.string-table:                     The dfio․string-table package.
                                                               (line  6)
* File, data-column.lisp:                The dfio/data-column․lisp file.
                                                               (line  6)
* File, decimal.lisp:                    The dfio/decimal․lisp file.
                                                               (line  6)
* File, delimited-text.lisp:             The dfio/delimited-text․lisp file.
                                                               (line  6)
* File, dfio.asd:                        The dfio/dfio․asd file.
                                                               (line  6)
* File, pkgdcl.lisp:                     The dfio/pkgdcl․lisp file.
                                                               (line  6)
* File, string-table.lisp:               The dfio/string-table․lisp file.
                                                               (line  6)
* File, utils.lisp:                      The dfio/utils․lisp file.
                                                               (line  6)
* File, write.lisp:                      The dfio/write․lisp file.
                                                               (line  6)
* non-negative-integer:                  Private types.        (line  6)
* Package, dfio:                         The dfio package.     (line  6)
* Package, dfio.data-column:             The dfio․data-column package.
                                                               (line  6)
* Package, dfio.decimal:                 The dfio․decimal package.
                                                               (line  6)
* Package, dfio.string-table:            The dfio․string-table package.
                                                               (line  6)
* parse-rational-error:                  Public conditions.    (line  6)
* pkgdcl.lisp:                           The dfio/pkgdcl․lisp file.
                                                               (line  6)
* str-strm-file:                         Private types.        (line 11)
* string-table:                          Public structures.    (line  6)
* string-table-duplicate:                Public conditions.    (line 27)
* string-table-not-found:                Public conditions.    (line 35)
* string-table.lisp:                     The dfio/string-table․lisp file.
                                                               (line  6)
* Structure, string-table:               Public structures.    (line  7)
* System, dfio:                          The dfio system.      (line  6)
* Type, non-negative-integer:            Private types.        (line  7)
* Type, str-strm-file:                   Private types.        (line 12)
* utils.lisp:                            The dfio/utils․lisp file.
                                                               (line  6)
* write.lisp:                            The dfio/write․lisp file.
                                                               (line  6)



Tag Table:
Node: Top900
Node: Copying2102
Node: Systems2280
Node: The dfio system2476
Ref: ❨1❩2568
Node: Files4137
Node: Lisp files4344
Node: The dfio/dfio․asd file4708
Ref: ❨2❩4873
Node: The dfio/pkgdcl․lisp file5009
Ref: ❨3❩5198
Node: The dfio/decimal․lisp file5473
Ref: ❨4❩5673
Node: The dfio/string-table․lisp file6208
Ref: ❨5❩6423
Node: The dfio/data-column․lisp file7558
Ref: ❨6❩7769
Node: The dfio/utils․lisp file8286
Ref: ❨7❩8478
Node: The dfio/write․lisp file9193
Ref: ❨8❩9388
Node: The dfio/delimited-text․lisp file9709
Ref: ❨9❩9887
Node: Packages10221
Node: The dfio․decimal package10499
Ref: ❨10❩10660
Node: The dfio․string-table package11223
Ref: ❨11❩11402
Node: The dfio package12586
Ref: ❨12❩12743
Node: The dfio․data-column package13868
Ref: ❨13❩14009
Node: Definitions14625
Node: Public Interface14875
Node: Public ordinary functions15151
Ref: ❨53❩15401
Ref: ❨65❩15568
Ref: ❨67❩15731
Ref: ❨66❩15918
Ref: ❨18❩16150
Ref: ❨14❩17524
Ref: ❨45❩18054
Ref: ❨43❩18817
Ref: ❨25❩19044
Ref: ❨30❩19231
Ref: ❨24❩19537
Ref: ❨23❩19787
Ref: ❨22❩20182
Ref: ❨28❩20461
Ref: ❨42❩20658
Ref: ❨44❩20933
Ref: ❨41❩21214
Ref: ❨38❩21484
Ref: ❨39❩22360
Ref: ❨40❩22629
Node: Public standalone methods22984
Ref: ❨83❩23260
Node: Public conditions23319
Ref: ❨15❩23518
Ref: ❨16❩23767
Ref: ❨17❩23965
Ref: ❨29❩24116
Ref: ❨31❩24353
Node: Public structures24548
Ref: ❨26❩24728
Ref: ❨27❩25088
Node: Public classes25399
Ref: ❨54❩25542
Ref: ❨55❩25715
Ref: ❨56❩25803
Ref: ❨57❩25952
Ref: ❨58❩26115
Ref: ❨59❩26276
Ref: ❨60❩26406
Ref: ❨61❩26534
Ref: ❨62❩26693
Ref: ❨63❩26856
Ref: ❨64❩27018
Node: Internals27251
Node: Private special variables27468
Ref: ❨48❩27675
Ref: ❨21❩27856
Node: Private macros27999
Ref: ❨47❩28211
Ref: ❨52❩28362
Node: Private ordinary functions28461
Ref: ❨46❩28661
Ref: ❨49❩28794
Ref: ❨36❩28994
Ref: ❨51❩29196
Ref: ❨19❩29709
Ref: ❨20❩30167
Ref: ❨32❩30521
Ref: ❨33❩30742
Ref: ❨37❩30985
Ref: ❨34❩31145
Ref: ❨35❩31194
Node: Private types31365
Ref: ❨68❩31516
Ref: ❨50❩31659
Node: Indexes31758
Node: Concept index31948
Node: Function index32069
Node: Variable index41559
Node: Data type index44181

End Tag Table


Local Variables:
coding: utf-8
End:
